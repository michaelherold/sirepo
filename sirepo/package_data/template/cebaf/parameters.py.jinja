# -*- python -*-
from pykern import pkio
from pykern import pkjson
from pykern.pkcollections import PKDict
import numpy
import os
import re
import time


def _get_machine_data(ml_cfg_inputs, ml_cfg_outputs):
    # stubbed data
    dx = 0.15
    return range(len(ml_cfg_inputs)), (1 - dx / 2) + dx * numpy.random.rand(len(ml_cfg_outputs))


def _predicted_settings(inputs, ml_model_file):
    import pickle
    import numpy
    from numpy import random

    #with open(, 'rb') as f:
    #    return pickle.load(f).predict(inputs)

    # stubbed data
    return numpy.array(range(12))


ml_cfg_inputs = {{ ml_cfg_inputs }}
ml_cfg_outputs = {{ ml_cfg_outputs }}
history_limit = {{ history_limit }}
machine_data_file = '{{ machine_data_file }}'

while True:

    now = int(time.time())
    i, o = _get_machine_data(ml_cfg_inputs, ml_cfg_outputs)
    p = _predicted_settings(i, None)

    o = p * o
    v = (p - o) ** 2

    res_i = PKDict(
        {k: PKDict() for k in ml_cfg_inputs}
    )
    for idx, x in enumerate(res_i.keys()):
        res_i[x].value = i[idx]

    res_o = PKDict(
        {k: PKDict() for k in ml_cfg_outputs}
    )
    for idx, k in enumerate(res_o.keys()):
        r = res_o[k]
        r.value = o[idx]
        r.prediction = p[idx]
        r.variance = v[idx]

    res = PKDict(
        inputReadings=res_i,
        outputReadings=res_o,
        time=now,
    )

    try:
        d = pkjson.load_any(pkio.read_text(machine_data_file))
    except FileNotFoundError:
        d = PKDict(h=[])
    d.h.append(res)
    d.h = d.h[max(0, len(d.h) - history_limit):]
    pkjson.dump_pretty(d, filename=machine_data_file)

    time.sleep(1)