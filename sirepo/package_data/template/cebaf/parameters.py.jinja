# -*- python -*-
from pykern import pkjson
from pykern.pkcollections import PKDict
import numpy
import os
import re
import time


def _get_machine_data(ml_cfg_inputs, ml_cfg_outputs):
    # stubbed data
    dx = 0.15
    return range(len(ml_cfg_inputs)), (1 - dx / 2) + dx * numpy.random.rand(len(ml_cfg_outputs))


def _predicted_settings(inputs, ml_model_file):
    import pickle
    import numpy
    from numpy import random

    #with open(, 'rb') as f:
    #    return pickle.load(f).predict(inputs)

    # stubbed data
    return numpy.array(range(12))


ml_cfg_inputs = {{ ml_cfg_inputs }}
ml_cfg_outputs = {{ ml_cfg_outputs }}
print("RUN WITH CFG IN {{ ml_cfg_inputs }} OUT {{ ml_cfg_outputs }}")
for j in range(5):

    i, o = _get_machine_data(ml_cfg_inputs, ml_cfg_outputs)
    p = _predicted_settings(i, None)

    o = p * o
    v = (p - o) ** 2

    res_i = PKDict(
        {k: PKDict() for k in ml_cfg_inputs}
    )
    for idx, x in enumerate(res_i.keys()):
        res_i[x].value = i[idx]

    res_o = PKDict(
        {k: PKDict() for k in ml_cfg_outputs}
    )
    for idx, k in enumerate(res_o.keys()):
        r = res_o[k]
        r.value = o[idx]
        r.prediction = p[idx]
        r.variance = v[idx]

    res = pkjson.dump_pretty(
        PKDict(
                inputReadings=res_i,
                outputReadings=res_o,
        ),
        pretty=False,
    )

    print('RES {}'.format(res))
    with open('{{ machine_data_file }}', 'a') as f:
        f.write(f'{res}\n')

    time.sleep(1)