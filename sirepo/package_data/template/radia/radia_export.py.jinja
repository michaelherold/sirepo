import h5py
import os
import re
from pykern.pkcollections import PKDict
import sirepo.mpi
from sirepo.template import radia_examples

VIEW_TYPE_OBJ = "objects"
VIEW_TYPE_FIELD = "fields"

_MODEL_CEE = "cee"
_MODEL_CUBOID = "cuboid"
_MODEL_CYLINDER = "cylinder"
_MODEL_ELL = "ell"
_MODEL_JAY= "jay"
_MODEL_GROUP = "geomGroup"
_MODEL_OBJECT = "geomObject"
_MODEL_EXTRUDED_POLY = "extrudedPoly"
_MODEL_RACETRACK = "racetrack"
_EXTRUDED_MODELS = [_MODEL_CEE, _MODEL_ELL, _MODEL_JAY, _MODEL_EXTRUDED_POLY]
_GROUP_MODELS = [_MODEL_GROUP]
_OBJ_MODELS = [_MODEL_CUBOID, _MODEL_CYLINDER, _MODEL_RACETRACK, _MODEL_OBJECT] + _EXTRUDED_MODELS
_MODELS = _OBJ_MODELS + _GROUP_MODELS

{% if not isExample and not dmpImportFile %}
sirepo_objs = {{ objects }}

{% include "radia_util.py" %}
{% endif %}

{% if isExample %}
{% include "radia_examples.py" %}
{% endif %}

# sirepo.util functions
{{ sirepoUtilSplit }}

{% if not isExample and not dmpImportFile  %}
def _add_object(o, radia_objs, id_map):
    model = o.get("model")
    t = o.get("type")
    sc = o.get("super_classes", [])
    mat = {{ matrix }}
    if _MODEL_OBJECT in sc:
        ctr = {{ sirepoUtilPrefix }}split_comma_delimited_string(o["center"], float)
        sz = {{ sirepoUtilPrefix }}split_comma_delimited_string(o["size"], float)
        m = {{ radiaUtilPrefix }}multiply_vector_by_matrix({{ sirepoUtilPrefix }}split_comma_delimited_string(o["magnetization"], float), mat)
        segs = {{ radiaUtilPrefix }}multiply_vector_by_matrix({{ sirepoUtilPrefix }}split_comma_delimited_string(o["segments"], int), mat)
    if t == _MODEL_CUBOID:
        g_id = {{ radiaUtilPrefix }}build_cuboid(
            center=ctr,
            size=sz,
            material=o["material"],
            magnetization=m,
            rem_mag=o["remanentMag"],
            segments=segs,
            h_m_curve=o["h_m_curve"]
        )
    if t == _MODEL_CYLINDER:
        g_id = {{ radiaUtilPrefix }}build_cylinder(
            center=ctr,
            extrusion_axis=o["extrusionAxis"],
            h_m_curve=o["h_m_curve"],
            material=o["material"],
            magnetization=m,
            num_sides=o["numSides"],
            radius=o["radius"],
            rem_mag=o["remanentMag"],
            segments=segs,
            size=sz,
        )
    if _MODEL_EXTRUDED_POLY in sc:
        g_id = {{ radiaUtilPrefix }}extrude(
            area=o["area"],
            center=ctr,
            size=sz,
            extrusion_axis=o["extrusionAxis"],
            points=o["points"],
            material=o["material"],
            magnetization=m,
            rem_mag=o["remanentMag"],
            segments=segs,
            t_level=o["triangulationLevel"],
            h_m_curve=o["h_m_curve"]
    )
    if t == _MODEL_RACETRACK:
        g_id = {{ radiaUtilPrefix }}build_racetrack(
            center={{ sirepoUtilPrefix }}split_comma_delimited_string(o["center"], float),
            axis=o["axis"],
            calc=o["fieldCalc"],
            radii={{ sirepoUtilPrefix }}split_comma_delimited_string(o["radii"], float),
            sides={{ sirepoUtilPrefix }}split_comma_delimited_string(o["sides"], float),
            height=o["height"],
            num_segs=o["numSegments"],
            curr_density=o["currentDensity"],
        )
    if t in _OBJ_MODELS:
        for b in o.get("bevels", []):
            g_id = {{ radiaUtilPrefix }}apply_bevel(
                g_id,
                center=ctr,
                lenDir=b["cutDir"],
                size=sz,
                **b
            )
        for f in o.get("fillets", []):
            g_id = {{ radiaUtilPrefix }}apply_fillet(
                g_id,
                center=ctr,
                size=sz,
                material=o["material"],
                magnetization=m,
                rem_mag=o["remanentMag"],
                segments=segs,
                h_m_curve=o["h_m_curve"],
                **f
            )
        {{ radiaUtilPrefix }}apply_color(
            g_id,
            [c / 255.0 for c in tuple(int(o["color"].lstrip("#")[i:i+2], 16) for i in (0, 2, 4))]
        )
    if model in _GROUP_MODELS:
        grp = []
        for obj_id in o["members"]:
            obj = [mobj for mobj in sirepo_objs if mobj["id"] == obj_id][0]
            if obj["id"] not in id_map.values():
                # have not added this object yet
                m_id = _add_object(obj, radia_objs, id_map)
                grp.append(m_id)
            else:
                grp.extend(
                    [list(id_map.keys())[list(id_map.values()).index(v)] for v in id_map.values() if v == obj["id"]]
                )
        g_id = {{ radiaUtilPrefix }}build_container(grp)
    for transform in o["transforms"]:
        {{ radiaUtilPrefix }}apply_transform(g_id, PKDict(transform))
    id_map[g_id] = o["id"]
    # don't add objects if they are already in a group
    if not o["groupId"]:
        radia_objs.append(g_id)
    return g_id

{% endif %}

def _build_radia_geom():
    id_map = {}
    radia_objs = []
{% if is_raw %}
    g_id, id_map = radia_examples.EXAMPLES['{{ exampleName }}']()
{% elif dmpImportFile %}
    with open('{{ dmpImportFile }}', 'rb') as f:
        b = f.read()
        g_id = {{ radiaUtilPrefix }}load_bin(b)
{% else %}
    for obj in sirepo_objs:
        if obj["id"] in id_map.values():
            continue
        o_id = _add_object(obj, radia_objs, id_map)
        id_map[o_id] = obj["id"]
    g_id = {{ radiaUtilPrefix }}build_container(radia_objs)
{% endif %}
    return g_id, id_map

# ** BEGIN **
g_id, id_map = _build_radia_geom()

print(f"Solving {g_id}...")
res = radia.Solve(g_id, {{ solvePrec }}, {{ solveMaxIter }}, {{ solveMethod }})
print(f"done: {res[3]} steps ({1000 * res[0]}ms); max |M| {res[1]} A/m; max |H| {res[2]} A/m")

{% if viewType == VIEW_TYPE_FIELD %}

{% if fieldType == FIELD_TYPE_MAG_M %}
f = radia.ObjM(g_id)
{% elif fieldType in POINT_FIELD_TYPES %}
f = radia.Fld(g_id, "{{ fieldType }}", {{ fieldPoints }})
{% else %}
f = None
{% endif %}
print(f"{{ fieldType }} field: {f}")

{% for fp in fieldPaths %}
{% if fp["type"] == "line" %}
p1 = [{{ fp["begin"] }}]
p2 = [{{ fp["end"] }}]
{% for i_type in INTEGRABLE_FIELD_TYPES %}
print(f"Integral of {{ i_type }} from {p1} to {p2}: {radia.FldInt(g_id, "inf", "{{ i_type }}", p1, p2)}")
{% endfor %}
{% endif %}
{% endfor %}

{% endif %}

print("Dumping to {{ dmpOutputFile }}")
with open("{{ dmpOutputFile }}", "wb") as f:
    f.write(radia.UtiDmp(g_id, "bin"))
